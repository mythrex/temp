# -*- coding: utf-8 -*-
"""Yogesh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PW1UML8uY6pHgwscvry3fYCD2cVa9caj
"""

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import argparse
import utils
import cv2
from PIL import Image
import numpy as np
from math import ceil
from colormath.color_objects import sRGBColor, LabColor
from colormath.color_conversions import convert_color
from colormath.color_diff import delta_e_cie2000
import json

parser = argparse.ArgumentParser("k-means-color")
parser.add_argument('--img1', type=str, required=True,
                    help='Location of first image')
parser.add_argument('--img2', type=str,
                    required=True, help='Location of first image')
parser.add_argument('--clusters', type=int,
                    default=5, help='No of clusters')
args = parser.parse_args()
args = vars(args)


def centroid_histogram(clt):
    # grab the number of different clusters and create a histogram
    # based on the number of pixels assigned to each cluster
    numLabels = np.arange(0, len(np.unique(clt.labels_)) + 1)
    (hist, _) = np.histogram(clt.labels_, bins=numLabels)

    # normalize the histogram, such that it sums to one
    hist = hist.astype("float")
    hist /= hist.sum()

    # return the histogram
    return hist


def plot_colors(hist, centroids):
    # initialize the bar chart representing the relative frequency
    # of each of the colors
    bar = np.zeros((50, 300, 3), dtype="uint8")
    startX = 0

    # loop over the percentage of each cluster and the color of
    # each cluster
    for (percent, color) in zip(hist, centroids):
        # plot the relative percentage of each cluster
        endX = startX + (percent * 300)
        cv2.rectangle(bar, (int(startX), 0), (int(endX), 50),
                      color.astype("uint8").tolist(), -1)
        startX = endX

    # return the bar chart
    return bar


def hist_to_dict(hist, bar):
    H, W, C = bar.shape
    res = {}
    s = 0
    for i, percent in enumerate(hist):
        idx = ceil(W * s)
        color = bar[0, idx, :]
        color_info = {
            'color': color.tolist(),
            '%': '%.2f' % (percent * 100)
        }
        s += percent
        res[i] = color_info
    return res


def color_similarity(cl1, cl2):
    cl1 = np.array(cl1)
    cl2 = np.array(cl2)
    cl1 = cl1 / 255.
    cl2 = cl2 / 255.
    color1 = sRGBColor(cl1[0], cl1[1], cl1[2])
    color2 = sRGBColor(cl2[0], cl2[1], cl2[2])

    # Convert from RGB to Lab Color Space
    color1_lab = convert_color(color1, LabColor)
    # Convert from RGB to Lab Color Space
    color2_lab = convert_color(color2, LabColor)

    # Find the color difference
    return delta_e_cie2000(color1_lab, color2_lab)


def get_image_info(img):
    image = cv2.imread(img)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    # reshape the image to be a list of pixels
    image = image.reshape((image.shape[0] * image.shape[1], 3))
    clt = KMeans(n_clusters=args["clusters"])
    clt.fit(image)

    hist = centroid_histogram(clt)
    hist.sort()
    bar = plot_colors(hist, clt.cluster_centers_)
    res = hist_to_dict(hist, bar)
    res['path'] = img
    return res


if __name__ == '__main__':
    data1 = get_image_info(args['img1'])
    data2 = get_image_info(args['img2'])
    similarity1 = color_similarity(data1[4]['color'], data2[4]['color'])
    similarity2 = color_similarity(data1[3]['color'], data2[3]['color'])
    similarity3 = color_similarity(data1[2]['color'], data2[2]['color'])
    output = {
        'img1': data1,
        'img2': data2,
        'similarity_idx1': similarity1,
        'similarity_idx2': similarity2,
        'similarity_idx3': similarity3
    }
    with open('output.json', 'w') as fp:
        json.dump(output, fp)
